
Assignment 1 dl

import numpy as np
import pandas as pd
from sklearn.model_selection import train_test_split
from sklearn.linear_model import LinearRegression
from sklearn.preprocessing import StandardScaler
from sklearn.metrics import mean_squared_error, mean_absolute_error,r2_score
from keras.models import Sequential
from keras.layers import Dense



boston = pd.read_csv("boston_house_prices.csv")
boston

x = boston[['LSTAT','RM','PTRATIO']]
y = boston['PRICE']
x_train,x_test,y_train,y_test = train_test_split(x,y,test_size=0.2,random_state=4)
scaler = StandardScaler()
x_train_scaled = scaler.fit_transform(x_train)
x_test_scaled = scaler.fit_transform(x_test)
lr_model = LinearRegression()
lr_model.fit(x_train_scaled,y_train)
y_pred_lr = lr_model.predict(x_test_scaled)
mse_lr = mean_squared_error(y_test,y_pred_lr)
mae_lr = mean_absolute_error(y_test,y_pred_lr)
r2_lr = r2_score(y_test,y_pred_lr)
print("Linear Regression Model Evaluation : ")
print("Mean Squared Error : " , mse_lr)
print("Mean Absolute Error : " , mae_lr)
print("R2 Score : " , r2_lr)



model = Sequential([
    Dense(128, activation='relu', input_dim=3),
    Dense(64, activation='relu'),
    Dense(32, activation='relu'),
    Dense(16, activation='relu'),
    Dense(1)
])

model.compile(optimizer='adam',loss='mse',metrics=['mae'])

history = model.fit(x_train_scaled, y_train, epochs=100, validation_split=0.05, verbose=1)

y_pred_nn = model.predict(x_test_scaled)
mse_nn,mae_nn = model.evaluate(x_test_scaled,y_test)

print("\n Neural Network Model Evaluation : ")
print("Mean Squared Error : " , mse_nn)
print("Mean Absolute Error : ",mae_nn)

new_data = np.array([[0.01,10.0,5.0]])

new_data_scaled = scaler.transform(new_data)

prediction = model.predict(new_data_scaled)

print("\n Predicted House Price : " , prediction[0][0])


Assignment No 2:

import tensorflow as tf 
import matplotlib.pyplot as plt 
from tensorflow import keras 
import numpy as np 

(x_train, y_train), (x_test, y_test) = keras.datasets.fashion_mnist.load_data() 
 plt.imshow(x_train[1])
plt.imshow(x_train[0])

x_train = x_train.astype('float32') / 255.0 
x_test = x_test.astype('float32') / 255.0 
x_train = x_train.reshape(-1, 28, 28, 1) 
x_test = x_test.reshape(-1, 28, 28, 1) 

x_train.shape
x_test.shape
y_train.shape
y_test.shape

model = keras.Sequential([ 
keras.layers.Conv2D(32, (3,3), activation='relu', input_shape=(28,28,1)), 
keras.layers.MaxPooling2D((2,2)), 
keras.layers.Dropout(0.25), 
keras.layers.Conv2D(64,  (3,3),  activation='relu'), 
keras.layers.MaxPooling2D((2,2)), 
keras.layers.Dropout(0.25), 
keras.layers.Conv2D(128, (3,3), activation='relu'), 
keras.layers.Flatten(), 
keras.layers.Dense(128, activation='relu'),  
keras.layers.Dropout(0.25), 
keras.layers.Dense(10, activation='softmax') 
]) 

model.summary() 

model.compile(optimizer='adam', loss='sparse_categorical_crossentropy', metrics=['accuracy'])
history = model.fit(x_train,y_train,epochs=10,validation_data=(x_test,y_test))

test_loss,test_acc = model.evaluate(x_test,y_test)
print('Test accuracy',test_acc)

